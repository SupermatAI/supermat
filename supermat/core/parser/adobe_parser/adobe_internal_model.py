# generated by datamodel-codegen:
#   filename:  structuredData.json
#   timestamp: 2024-11-28T20:54:14+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Version(BaseModel):
    json_export: str
    page_segmentation: str
    schema_: str = Field(..., alias="schema")
    structure: str
    table_structure: str


class ExtendedMetadata(BaseModel):
    ID_instance: str
    ID_permanent: str
    has_acroform: bool
    has_embedded_files: bool
    is_XFA: bool
    is_certified: bool
    is_encrypted: bool
    is_digitally_signed: bool
    language: str
    page_count: int
    pdf_version: str
    pdfa_compliance_level: str
    pdfua_compliance_level: str


class FontInfo(BaseModel):
    alt_family_name: str
    embedded: bool
    encoding: str
    family_name: str
    font_type: str
    italic: bool
    monospaced: bool
    name: str
    subset: bool
    weight: int


class Attributes(BaseModel):
    LineHeight: Optional[float] = None
    TextAlign: Optional[str] = None
    BBox: Optional[List[float]] = None
    SpaceAfter: Optional[float] = None
    Placement: Optional[str] = None


class Element(BaseModel):
    Bounds: tuple[float, float, float, float]
    ClipBounds: Optional[List[float]] = None
    Font: Optional[FontInfo] = None
    HasClip: Optional[bool] = None
    Lang: Optional[str] = None
    ObjectID: int
    Page: int
    Path: str
    Text: Optional[str] = None
    TextSize: Optional[float] = None
    attributes: Optional[Attributes] = None
    filePaths: Optional[List[str]] = None
    Skew: Optional[float] = None


class Boxes(BaseModel):
    CropBox: List[float]
    MediaBox: List[float]


class Page(BaseModel):
    boxes: Boxes
    height: float
    is_scanned: bool
    page_number: int
    rotation: int
    width: float


class AdobeStructuredData(BaseModel):
    version: Version
    extended_metadata: ExtendedMetadata
    elements: List[Element]
    pages: List[Page]
